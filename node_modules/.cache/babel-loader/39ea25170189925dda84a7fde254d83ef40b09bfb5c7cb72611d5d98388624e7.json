{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raymo\\\\Downloads\\\\UdemyProjects\\\\DogApi-Project\\\\src\\\\Webpages\\\\DogBreed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport NavBar from \"../Component/NavBar\";\nimport Footer from \"../Component/Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DogBreed() {\n  _s();\n  // Get all list of dog names for option dropdown menu\n  const [dogBreeds, setDogBreeds] = useState([]);\n  useEffect(() => {\n    const fetchDog = async () => {\n      try {\n        const res = await fetch(\"https://dog.ceo/api/breeds/list/all\");\n        const data = await res.json();\n        const getBreed = Object.keys(data.message);\n        setDogBreeds(getBreed);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchDog();\n  }, []);\n  //--------------------------------------------------------\n\n  // Populate dog once image is selected\n  const [dogImages, setDogImages] = useState([]);\n  const fetchDogImage = BreedName => {\n    try {\n      fetch(`https://dog.ceo/api/breed/${BreedName}/images/random/12`) // The /3 is populating 3 images per row\n      .then(response => response.json()).then(getData => {\n        setDogImages(getData.message);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    const handler = event => {\n      const BreedName = event.target.value;\n      fetchDogImage(BreedName);\n    };\n    const options = document.getElementById(\"dropdownmenu\");\n    if (options != null) {\n      options.addEventListener(\"change\", handler);\n      return () => {\n        options.removeEventListener(\"change\", handler);\n      };\n    }\n  }, []);\n  //--------------------------------------------------------\n\n  // Get random images when click button\n  const [subBreed, setSubBreed] = useState([]);\n  const [buttonClicked, setButtonClicked] = useState(false);\n  useEffect(() => {\n    fetch(\"https://dog.ceo/api/breeds/image/random/12\").then(response => response.json()).then(getSubBreed => {\n      setSubBreed(getSubBreed.message);\n    });\n  }, [buttonClicked]);\n  const handleButtonChange = () => {\n    setButtonClicked(!buttonClicked);\n  };\n  const [selectDropDown, setSelectDropDown] = useState(false);\n  //--------------------------------------------------------\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dogBreed-title\",\n        children: \"Welcome to the dog World\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option-wrap grid md:grid-cols-1 flex items-center justify-center text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"dropdownmenu\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Please select a breed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this), dogBreeds.map((dogBreed, uniqueId) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: dogBreed,\n                children: dogBreed\n              }, uniqueId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"randomImageButton\",\n              onClick: handleButtonChange,\n              children: [\"Generate random images\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"position-dog\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-20\",\n          children: dogImages.map((dogImage, uniqueId2) => /*#__PURE__*/_jsxDEV(\"img\", {\n            id: \"contain-image\",\n            src: dogImage,\n            style: {\n              width: \"345px\",\n              height: \"354px\",\n              objectFit: \"cover\"\n            },\n            alt: \"Dog Images\"\n          }, uniqueId2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-20\",\n        children: subBreed.map((breed, uniqueId3) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: breed,\n          alt: \"random dog\",\n          style: {\n            width: \"380px\",\n            height: \"300px\",\n            objectFit: \"cover\"\n          }\n        }, uniqueId3, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(DogBreed, \"N44s2pf/QxJRDFEtkxWzIFcFw3w=\");\n_c = DogBreed;\nexport default DogBreed;\nvar _c;\n$RefreshReg$(_c, \"DogBreed\");","map":{"version":3,"names":["React","useEffect","useState","NavBar","Footer","DogBreed","dogBreeds","setDogBreeds","fetchDog","res","fetch","data","json","getBreed","Object","keys","message","error","console","log","dogImages","setDogImages","fetchDogImage","BreedName","then","response","getData","handler","event","target","value","options","document","getElementById","addEventListener","removeEventListener","subBreed","setSubBreed","buttonClicked","setButtonClicked","getSubBreed","handleButtonChange","selectDropDown","setSelectDropDown","map","dogBreed","uniqueId","dogImage","uniqueId2","width","height","objectFit","breed","uniqueId3"],"sources":["C:/Users/raymo/Downloads/UdemyProjects/DogApi-Project/src/Webpages/DogBreed.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport NavBar from \"../Component/NavBar\";\r\nimport Footer from \"../Component/Footer\";\r\n\r\nfunction DogBreed() {\r\n  // Get all list of dog names for option dropdown menu\r\n  const [dogBreeds, setDogBreeds] = useState([]);\r\n  useEffect(() => {\r\n    const fetchDog = async () => {\r\n      try {\r\n        const res = await fetch(\"https://dog.ceo/api/breeds/list/all\");\r\n        const data = await res.json();\r\n        const getBreed = Object.keys(data.message);\r\n        setDogBreeds(getBreed);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchDog();\r\n  }, []);\r\n  //--------------------------------------------------------\r\n\r\n\r\n  // Populate dog once image is selected\r\n  const [dogImages, setDogImages] = useState([]);\r\n  const fetchDogImage = (BreedName) => {\r\n    try {\r\n      fetch(`https://dog.ceo/api/breed/${BreedName}/images/random/12`) // The /3 is populating 3 images per row\r\n        .then((response) => response.json())\r\n        .then((getData) => {\r\n          setDogImages(getData.message);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handler = (event) => {\r\n      const BreedName = event.target.value;\r\n      fetchDogImage(BreedName);\r\n    };\r\n\r\n    const options = document.getElementById(\"dropdownmenu\");\r\n    if (options != null) {\r\n      options.addEventListener(\"change\", handler);\r\n\r\n      return () => {\r\n        options.removeEventListener(\"change\", handler);\r\n      };\r\n    }\r\n  }, []);\r\n  //--------------------------------------------------------\r\n\r\n\r\n\r\n  // Get random images when click button\r\n  const [subBreed, setSubBreed] = useState([]);\r\n  const [buttonClicked, setButtonClicked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://dog.ceo/api/breeds/image/random/12\")\r\n      .then((response) => response.json())\r\n      .then((getSubBreed) => {\r\n        setSubBreed(getSubBreed.message);\r\n      });\r\n  }, [buttonClicked]);\r\n\r\n  const handleButtonChange = () => {\r\n    setButtonClicked(!buttonClicked);\r\n  };\r\n\r\n  const [selectDropDown, setSelectDropDown] = useState(false);\r\n  //--------------------------------------------------------\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\" id=\"container\">\r\n        {/* Navbar links calling from Component/Navbar.js */}\r\n        <NavBar></NavBar>\r\n\r\n        <div className=\"dogBreed-title\">Welcome to the dog World</div>\r\n\r\n          {/* {!selectDropDown ? ( */}\r\n        <div className=\"option-wrap grid md:grid-cols-1 flex items-center justify-center text-center\">\r\n          <div className=\"row\">\r\n\r\n            <div className=\"col-sm\">\r\n              <select id=\"dropdownmenu\">\r\n                <option>Please select a breed</option>\r\n                {dogBreeds.map((dogBreed, uniqueId) => (\r\n                  <option \r\n                      key={uniqueId} \r\n                      value={dogBreed}>\r\n                     {dogBreed}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n           \r\n\r\n            <div className=\"col-sm\">\r\n              <button className=\"randomImageButton\" onClick={handleButtonChange}>\r\n                Generate random images{\" \"}\r\n              </button>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        </div>\r\n       \r\n\r\n\r\n        <div className=\"position-dog\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-20\">\r\n            {dogImages.map((dogImage, uniqueId2) => (\r\n              <img\r\n                id=\"contain-image\"\r\n                src={dogImage}\r\n                key={uniqueId2}\r\n                style={{ width: \"345px\", height: \"354px\", objectFit: \"cover\" }}\r\n                alt=\"Dog Images\"\r\n              ></img>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-20\">\r\n          {subBreed.map((breed, uniqueId3) => (\r\n            <img\r\n              src={breed}\r\n              key={uniqueId3}\r\n              alt=\"random dog\"\r\n              style={{ width: \"380px\", height: \"300px\", objectFit: \"cover\" }}\r\n            ></img>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <Footer></Footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DogBreed;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}